{"version":3,"sources":["API.ts","Comment.tsx","CommentList.tsx","UserInfo.tsx","User.tsx","Post.tsx","PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","Comment","comment","name","body","email","className","CommentList","comments","map","key","id","UserInfo","author","address","city","zipcode","street","suite","User","Post","post","title","PostList","posts","App","useState","setPreparedPosts","isLoading","setIsLoadind","isLoaded","setIsLoaded","query","setQuery","filterQuery","setFilterQuery","loadPosts","a","Promise","all","fetch","then","response","json","postsFromServer","usersFromServer","commentsFromServer","preparedPosts","filter","postId","find","user","userId","setFilterQueryWithDebounce","useCallback","debounce","filteredPosts","useMemo","toLowerCase","includes","disabled","type","onClick","value","onChange","event","target","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37d35db9.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = () => {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nexport const getComments = () => {\n  return fetch(`${API_URL}/comments`)\n    .then(response => response.json());\n};\n","import React from 'react';\n\ntype Props = {\n  comment: CommentProps;\n};\n\nconst Comment: React.FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n\n  return (\n    <>\n      <div className=\"comment\">\n        <p className=\"author\">\n          Ð¡omment author:&nbsp;\n          {name}\n        </p>\n        <p>{body}</p>\n        <p className=\"email\">\n          Email:&nbsp;\n          {email}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default Comment;\n","import React from 'react';\nimport Comment from './Comment';\n\ntype Props = {\n  comments: CommentProps[];\n};\n\nconst CommentList: React.FC<Props> = ({ comments }) => (\n  <article className=\"comments\">\n    Comments:&nbsp;\n    {comments.map((comment: CommentProps) => (\n      <Comment comment={comment} key={comment.id} />\n    ))}\n  </article>\n);\n\nexport default CommentList;\n","import React from 'react';\n\ntype Props = {\n  author: UserProps;\n};\n\nconst UserInfo: React.FC<Props> = ({ author }) => {\n  const {\n    city, zipcode, street, suite,\n  } = { ...author.address };\n\n  return (\n    <p className=\"address\">\n      City:&nbsp;\n      {city}\n      , zipcode:&nbsp;\n      {zipcode}\n      , street:&nbsp;\n      {street}\n      , suite:&nbsp;\n      {suite}\n    </p>\n  );\n};\n\nexport default UserInfo;\n","import React from 'react';\nimport CommentList from './CommentList';\nimport UserInfo from './UserInfo';\n\ntype Props = {\n  author: UserProps;\n  comments: CommentProps[];\n};\n\nconst User: React.FC<Props> = ({ author, comments }) => (\n  <>\n    <div className=\"user_info\">\n      <h4 className=\"author\">\n        Author:&nbsp;\n        {author.name}\n      </h4>\n      <p className=\"email\">\n        Email:&nbsp;\n        {author.email}\n      </p>\n    </div>\n    <UserInfo author={author} />\n    <CommentList comments={comments} />\n  </>\n);\n\nexport default User;\n","import React from 'react';\nimport User from './User';\n\ntype Props = {\n  post: PostProps;\n};\n\nconst Post: React.FC<Props> = ({ post }) => (\n  <>\n    <ul className=\"list\">\n      <li className=\"list__userInfo\">\n        <h3 className=\"title\">{post.title}</h3>\n        <p className=\"body\">{post.body}</p>\n        <User author={post.author} comments={post.comments} />\n      </li>\n    </ul>\n  </>\n);\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\ntype Props = {\n  posts: PostProps[];\n};\n\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <>\n    {posts.map((post: PostProps) => (\n      <Post post={post} key={post.id} />\n    ))}\n  </>\n);\n\nexport default PostList;\n","import React, {\n  useState, FormEvent, useMemo, useCallback,\n} from 'react';\nimport './App.css';\nimport debounce from 'lodash.debounce';\nimport { getPosts, getUsers, getComments } from './API';\nimport PostList from './PostList';\n\nconst App = () => {\n  const [posts, setPreparedPosts] = useState([]);\n  const [isLoading, setIsLoadind] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterQuery, setFilterQuery] = useState('.');\n\n  const loadPosts = async () => {\n    setIsLoadind(true);\n\n    const [postsFromServer, usersFromServer, commentsFromServer] = await Promise.all(\n      [getPosts(), getUsers(), getComments()],\n    );\n\n    const preparedPosts = postsFromServer.map((post: PostProps) => ({\n      ...post,\n      comments: commentsFromServer.filter((comment: CommentProps) => comment.postId === post.id),\n      author: usersFromServer.find((user: UserProps) => user.id === post.userId),\n    }));\n\n    setPreparedPosts(preparedPosts);\n    setIsLoadind(false);\n    setIsLoaded(true);\n    setFilterQuery('');\n  };\n\n  const setFilterQueryWithDebounce = useCallback(debounce(setFilterQuery, 1000), []);\n\n  const handleInput = (event: FormEvent<HTMLInputElement>) => {\n    const { value } = event.target as HTMLInputElement;\n\n    setQuery(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  const filteredPosts = useMemo(\n    () => posts\n      .filter((post: PostProps) => (post.title + post.body)\n        .toLowerCase()\n        .includes(query.toLowerCase())), [filterQuery],\n  );\n\n  return (\n    <>\n      <h1 className=\"display-5\">Dynamic list of posts</h1>\n      <div className=\"buttons\">\n        {!isLoaded && (\n          <button\n            className=\"btn btn-primary\"\n            disabled={isLoading}\n            type=\"button\"\n            onClick={loadPosts}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        )}\n        {isLoaded\n        && (\n          <input\n            type=\"text\"\n            value={query}\n            className=\"form-control mrl\"\n            onChange={handleInput}\n          />\n        )}\n      </div>\n      {isLoading\n        && <div className=\"spinner-border text-primary\" role=\"status\" />}\n      <div className=\"container\">\n        <PostList posts={filteredPosts} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}